"use strict";(self.webpackChunkgithubresume=self.webpackChunkgithubresume||[]).push([[563],{4311:(e,t,n)=>{n.d(t,{Ps:()=>X});var r=n(7582);function i(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}const s=/\r\n|[\n\r]/g;function o(e,t){let n=0,r=1;for(const o of e.body.matchAll(s)){if("number"==typeof o.index||i(!1),o.index>=t)break;n=o.index+o[0].length,r+=1}return{line:r,column:t+1-n}}function a(e,t){const n=e.locationOffset.column-1,r="".padStart(n)+e.body,i=t.line-1,s=e.locationOffset.line-1,o=t.line+s,a=1===t.line?n:0,u=t.column+a,h=`${e.name}:${o}:${u}\n`,l=r.split(/\r\n|[\n\r]/g),d=l[i];if(d.length>120){const e=Math.floor(u/80),t=u%80,n=[];for(let e=0;e<d.length;e+=80)n.push(d.slice(e,e+80));return h+c([[`${o} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return h+c([[o-1+" |",l[i-1]],[`${o} |`,d],["|","^".padStart(u)],[`${o+1} |`,l[i+1]]])}function c(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}class u extends Error{constructor(e,...t){var n,r,i;const{nodes:s,source:a,positions:c,path:l,originalError:d,extensions:p}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=d?d:void 0,this.nodes=h(Array.isArray(s)?s:s?[s]:void 0);const f=h(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=a?a:null==f||null===(r=f[0])||void 0===r?void 0:r.source,this.positions=null!=c?c:null==f?void 0:f.map((e=>e.start)),this.locations=c&&a?c.map((e=>o(a,e))):null==f?void 0:f.map((e=>o(e.source,e.start)));const m="object"==typeof(g=null==d?void 0:d.extensions)&&null!==g?null==d?void 0:d.extensions:void 0;var g;this.extensions=null!==(i=null!=p?p:m)&&void 0!==i?i:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=d&&d.stack?Object.defineProperty(this,"stack",{value:d.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,u):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const n of this.nodes)n.loc&&(e+="\n\n"+a((t=n.loc).source,o(t.source,t.start)));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+a(this.source,t);var t;return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function h(e){return void 0===e||0===e.length?void 0:e}function l(e,t,n){return new u(`Syntax Error: ${n}`,{source:e,positions:[t]})}var d,p=n(2380);!function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(d||(d={}));var f,m,g=n(7359),y=n(7392),v=n(8297);(m=f||(f={})).SOF="<SOF>",m.EOF="<EOF>",m.BANG="!",m.DOLLAR="$",m.AMP="&",m.PAREN_L="(",m.PAREN_R=")",m.SPREAD="...",m.COLON=":",m.EQUALS="=",m.AT="@",m.BRACKET_L="[",m.BRACKET_R="]",m.BRACE_L="{",m.PIPE="|",m.BRACE_R="}",m.NAME="Name",m.INT="Int",m.FLOAT="Float",m.STRING="String",m.BLOCK_STRING="BlockString",m.COMMENT="Comment";class b{constructor(e){const t=new p.WU(f.SOF,0,0,0,0);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let e=this.token;if(e.kind!==f.EOF)do{if(e.next)e=e.next;else{const t=O(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===f.COMMENT);return e}}function k(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function w(e,t){return E(e.charCodeAt(t))&&T(e.charCodeAt(t+1))}function E(e){return e>=55296&&e<=56319}function T(e){return e>=56320&&e<=57343}function x(e,t){const n=e.source.body.codePointAt(t);if(void 0===n)return f.EOF;if(n>=32&&n<=126){const e=String.fromCodePoint(n);return'"'===e?"'\"'":`"${e}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function N(e,t,n,r,i){const s=e.line,o=1+n-e.lineStart;return new p.WU(t,n,r,s,o,i)}function O(e,t){const n=e.source.body,r=n.length;let i=t;for(;i<r;){const t=n.charCodeAt(i);switch(t){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:10===n.charCodeAt(i+1)?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return D(e,i);case 33:return N(e,f.BANG,i,i+1);case 36:return N(e,f.DOLLAR,i,i+1);case 38:return N(e,f.AMP,i,i+1);case 40:return N(e,f.PAREN_L,i,i+1);case 41:return N(e,f.PAREN_R,i,i+1);case 46:if(46===n.charCodeAt(i+1)&&46===n.charCodeAt(i+2))return N(e,f.SPREAD,i,i+3);break;case 58:return N(e,f.COLON,i,i+1);case 61:return N(e,f.EQUALS,i,i+1);case 64:return N(e,f.AT,i,i+1);case 91:return N(e,f.BRACKET_L,i,i+1);case 93:return N(e,f.BRACKET_R,i,i+1);case 123:return N(e,f.BRACE_L,i,i+1);case 124:return N(e,f.PIPE,i,i+1);case 125:return N(e,f.BRACE_R,i,i+1);case 34:return 34===n.charCodeAt(i+1)&&34===n.charCodeAt(i+2)?L(e,i):S(e,i)}if((0,v.X1)(t)||45===t)return A(e,i,t);if((0,v.LQ)(t))return F(e,i);throw l(e.source,i,39===t?"Unexpected single quote character ('), did you mean to use a double quote (\")?":k(t)||w(n,i)?`Unexpected character: ${x(e,i)}.`:`Invalid character: ${x(e,i)}.`)}return N(e,f.EOF,r,r)}function D(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r;){const e=n.charCodeAt(i);if(10===e||13===e)break;if(k(e))++i;else{if(!w(n,i))break;i+=2}}return N(e,f.COMMENT,t,i,n.slice(t+1,i))}function A(e,t,n){const r=e.source.body;let i=t,s=n,o=!1;if(45===s&&(s=r.charCodeAt(++i)),48===s){if(s=r.charCodeAt(++i),(0,v.X1)(s))throw l(e.source,i,`Invalid number, unexpected digit after 0: ${x(e,i)}.`)}else i=C(e,i,s),s=r.charCodeAt(i);if(46===s&&(o=!0,s=r.charCodeAt(++i),i=C(e,i,s),s=r.charCodeAt(i)),69!==s&&101!==s||(o=!0,s=r.charCodeAt(++i),43!==s&&45!==s||(s=r.charCodeAt(++i)),i=C(e,i,s),s=r.charCodeAt(i)),46===s||(0,v.LQ)(s))throw l(e.source,i,`Invalid number, expected digit but got: ${x(e,i)}.`);return N(e,o?f.FLOAT:f.INT,t,i,r.slice(t,i))}function C(e,t,n){if(!(0,v.X1)(n))throw l(e.source,t,`Invalid number, expected digit but got: ${x(e,t)}.`);const r=e.source.body;let i=t+1;for(;(0,v.X1)(r.charCodeAt(i));)++i;return i}function S(e,t){const n=e.source.body,r=n.length;let i=t+1,s=i,o="";for(;i<r;){const r=n.charCodeAt(i);if(34===r)return o+=n.slice(s,i),N(e,f.STRING,t,i+1,o);if(92!==r){if(10===r||13===r)break;if(k(r))++i;else{if(!w(n,i))throw l(e.source,i,`Invalid character within String: ${x(e,i)}.`);i+=2}}else{o+=n.slice(s,i);const t=117===n.charCodeAt(i+1)?123===n.charCodeAt(i+2)?_(e,i):I(e,i):R(e,i);o+=t.value,i+=t.size,s=i}}throw l(e.source,i,"Unterminated string.")}function _(e,t){const n=e.source.body;let r=0,i=3;for(;i<12;){const e=n.charCodeAt(t+i++);if(125===e){if(i<5||!k(r))break;return{value:String.fromCodePoint(r),size:i}}if(r=r<<4|M(e),r<0)break}throw l(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+i)}".`)}function I(e,t){const n=e.source.body,r=P(n,t+2);if(k(r))return{value:String.fromCodePoint(r),size:6};if(E(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){const e=P(n,t+8);if(T(e))return{value:String.fromCodePoint(r,e),size:12}}throw l(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function P(e,t){return M(e.charCodeAt(t))<<12|M(e.charCodeAt(t+1))<<8|M(e.charCodeAt(t+2))<<4|M(e.charCodeAt(t+3))}function M(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function R(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw l(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function L(e,t){const n=e.source.body,r=n.length;let i=e.lineStart,s=t+3,o=s,a="";const c=[];for(;s<r;){const r=n.charCodeAt(s);if(34===r&&34===n.charCodeAt(s+1)&&34===n.charCodeAt(s+2)){a+=n.slice(o,s),c.push(a);const r=N(e,f.BLOCK_STRING,t,s+3,(0,y.wv)(c).join("\n"));return e.line+=c.length-1,e.lineStart=i,r}if(92!==r||34!==n.charCodeAt(s+1)||34!==n.charCodeAt(s+2)||34!==n.charCodeAt(s+3))if(10!==r&&13!==r)if(k(r))++s;else{if(!w(n,s))throw l(e.source,s,`Invalid character within String: ${x(e,s)}.`);s+=2}else a+=n.slice(o,s),c.push(a),13===r&&10===n.charCodeAt(s+1)?s+=2:++s,a="",o=s,i=s;else a+=n.slice(o,s),o=s+1,s+=4}throw l(e.source,s,"Unterminated string.")}function F(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r;){const e=n.charCodeAt(i);if(!(0,v.HQ)(e))break;++i}return N(e,f.NAME,t,i,n.slice(t,i))}var U=n(7826),B=n(5821);const Q=globalThis.process&&"production"===globalThis.process.env.NODE_ENV?function(e,t){return e instanceof t}:function(e,t){if(e instanceof t)return!0;if("object"==typeof e&&null!==e){var n;const r=t.prototype[Symbol.toStringTag];if(r===(Symbol.toStringTag in e?e[Symbol.toStringTag]:null===(n=e.constructor)||void 0===n?void 0:n.name)){const t=(0,B.X)(e);throw new Error(`Cannot use ${r} "${t}" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`)}}return!1};class q{constructor(e,t="GraphQL request",n={line:1,column:1}){"string"==typeof e||(0,U.a)(!1,`Body must be a string. Received: ${(0,B.X)(e)}.`),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||(0,U.a)(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,U.a)(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}class j{constructor(e,t={}){const n=function(e){return Q(e,q)}(e)?e:new q(e);this._lexer=new b(n),this._options=t,this._tokenCounter=0}parseName(){const e=this.expectToken(f.NAME);return this.node(e,{kind:g.h.NAME,value:e.value})}parseDocument(){return this.node(this._lexer.token,{kind:g.h.DOCUMENT,definitions:this.many(f.SOF,this.parseDefinition,f.EOF)})}parseDefinition(){if(this.peek(f.BRACE_L))return this.parseOperationDefinition();const e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===f.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw l(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}parseOperationDefinition(){const e=this._lexer.token;if(this.peek(f.BRACE_L))return this.node(e,{kind:g.h.OPERATION_DEFINITION,operation:p.ku.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const t=this.parseOperationType();let n;return this.peek(f.NAME)&&(n=this.parseName()),this.node(e,{kind:g.h.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const e=this.expectToken(f.NAME);switch(e.value){case"query":return p.ku.QUERY;case"mutation":return p.ku.MUTATION;case"subscription":return p.ku.SUBSCRIPTION}throw this.unexpected(e)}parseVariableDefinitions(){return this.optionalMany(f.PAREN_L,this.parseVariableDefinition,f.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:g.h.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(f.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(f.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const e=this._lexer.token;return this.expectToken(f.DOLLAR),this.node(e,{kind:g.h.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:g.h.SELECTION_SET,selections:this.many(f.BRACE_L,this.parseSelection,f.BRACE_R)})}parseSelection(){return this.peek(f.SPREAD)?this.parseFragment():this.parseField()}parseField(){const e=this._lexer.token,t=this.parseName();let n,r;return this.expectOptionalToken(f.COLON)?(n=t,r=this.parseName()):r=t,this.node(e,{kind:g.h.FIELD,alias:n,name:r,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(f.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(e){const t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(f.PAREN_L,t,f.PAREN_R)}parseArgument(e=!1){const t=this._lexer.token,n=this.parseName();return this.expectToken(f.COLON),this.node(t,{kind:g.h.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const e=this._lexer.token;this.expectToken(f.SPREAD);const t=this.expectOptionalKeyword("on");return!t&&this.peek(f.NAME)?this.node(e,{kind:g.h.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:g.h.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:g.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:g.h.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(e){const t=this._lexer.token;switch(t.kind){case f.BRACKET_L:return this.parseList(e);case f.BRACE_L:return this.parseObject(e);case f.INT:return this.advanceLexer(),this.node(t,{kind:g.h.INT,value:t.value});case f.FLOAT:return this.advanceLexer(),this.node(t,{kind:g.h.FLOAT,value:t.value});case f.STRING:case f.BLOCK_STRING:return this.parseStringLiteral();case f.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:g.h.BOOLEAN,value:!0});case"false":return this.node(t,{kind:g.h.BOOLEAN,value:!1});case"null":return this.node(t,{kind:g.h.NULL});default:return this.node(t,{kind:g.h.ENUM,value:t.value})}case f.DOLLAR:if(e){if(this.expectToken(f.DOLLAR),this._lexer.token.kind===f.NAME){const e=this._lexer.token.value;throw l(this._lexer.source,t.start,`Unexpected variable "$${e}" in constant value.`)}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:g.h.STRING,value:e.value,block:e.kind===f.BLOCK_STRING})}parseList(e){return this.node(this._lexer.token,{kind:g.h.LIST,values:this.any(f.BRACKET_L,(()=>this.parseValueLiteral(e)),f.BRACKET_R)})}parseObject(e){return this.node(this._lexer.token,{kind:g.h.OBJECT,fields:this.any(f.BRACE_L,(()=>this.parseObjectField(e)),f.BRACE_R)})}parseObjectField(e){const t=this._lexer.token,n=this.parseName();return this.expectToken(f.COLON),this.node(t,{kind:g.h.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}parseDirectives(e){const t=[];for(;this.peek(f.AT);)t.push(this.parseDirective(e));return t}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(e){const t=this._lexer.token;return this.expectToken(f.AT),this.node(t,{kind:g.h.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}parseTypeReference(){const e=this._lexer.token;let t;if(this.expectOptionalToken(f.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(f.BRACKET_R),t=this.node(e,{kind:g.h.LIST_TYPE,type:n})}else t=this.parseNamedType();return this.expectOptionalToken(f.BANG)?this.node(e,{kind:g.h.NON_NULL_TYPE,type:t}):t}parseNamedType(){return this.node(this._lexer.token,{kind:g.h.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(f.STRING)||this.peek(f.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),r=this.many(f.BRACE_L,this.parseOperationTypeDefinition,f.BRACE_R);return this.node(e,{kind:g.h.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r})}parseOperationTypeDefinition(){const e=this._lexer.token,t=this.parseOperationType();this.expectToken(f.COLON);const n=this.parseNamedType();return this.node(e,{kind:g.h.OPERATION_TYPE_DEFINITION,operation:t,type:n})}parseScalarTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),r=this.parseConstDirectives();return this.node(e,{kind:g.h.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r})}parseObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),s=this.parseFieldsDefinition();return this.node(e,{kind:g.h.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:s})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(f.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(f.BRACE_L,this.parseFieldDefinition,f.BRACE_R)}parseFieldDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(f.COLON);const i=this.parseTypeReference(),s=this.parseConstDirectives();return this.node(e,{kind:g.h.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:s})}parseArgumentDefs(){return this.optionalMany(f.PAREN_L,this.parseInputValueDef,f.PAREN_R)}parseInputValueDef(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(f.COLON);const r=this.parseTypeReference();let i;this.expectOptionalToken(f.EQUALS)&&(i=this.parseConstValueLiteral());const s=this.parseConstDirectives();return this.node(e,{kind:g.h.INPUT_VALUE_DEFINITION,description:t,name:n,type:r,defaultValue:i,directives:s})}parseInterfaceTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),s=this.parseFieldsDefinition();return this.node(e,{kind:g.h.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:s})}parseUnionTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseUnionMemberTypes();return this.node(e,{kind:g.h.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i})}parseUnionMemberTypes(){return this.expectOptionalToken(f.EQUALS)?this.delimitedMany(f.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();return this.node(e,{kind:g.h.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i})}parseEnumValuesDefinition(){return this.optionalMany(f.BRACE_L,this.parseEnumValueDefinition,f.BRACE_R)}parseEnumValueDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),r=this.parseConstDirectives();return this.node(e,{kind:g.h.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw l(this._lexer.source,this._lexer.token.start,`${W(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();return this.node(e,{kind:g.h.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i})}parseInputFieldsDefinition(){return this.optionalMany(f.BRACE_L,this.parseInputValueDef,f.BRACE_R)}parseTypeSystemExtension(){const e=this._lexer.lookahead();if(e.kind===f.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}parseSchemaExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const t=this.parseConstDirectives(),n=this.optionalMany(f.BRACE_L,this.parseOperationTypeDefinition,f.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:g.h.SCHEMA_EXTENSION,directives:t,operationTypes:n})}parseScalarTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:g.h.SCALAR_TYPE_EXTENSION,name:t,directives:n})}parseObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:g.h.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseInterfaceTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:g.h.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseUnionTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:g.h.UNION_TYPE_EXTENSION,name:t,directives:n,types:r})}parseEnumTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:g.h.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r})}parseInputObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:g.h.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r})}parseDirectiveDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(f.AT);const n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const s=this.parseDirectiveLocations();return this.node(e,{kind:g.h.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:s})}parseDirectiveLocations(){return this.delimitedMany(f.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(d,t.value))return t;throw this.unexpected(e)}node(e,t){return!0!==this._options.noLocation&&(t.loc=new p.Ye(e,this._lexer.lastToken,this._lexer.source)),t}peek(e){return this._lexer.token.kind===e}expectToken(e){const t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw l(this._lexer.source,t.start,`Expected ${Y(e)}, found ${W(t)}.`)}expectOptionalToken(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}expectKeyword(e){const t=this._lexer.token;if(t.kind!==f.NAME||t.value!==e)throw l(this._lexer.source,t.start,`Expected "${e}", found ${W(t)}.`);this.advanceLexer()}expectOptionalKeyword(e){const t=this._lexer.token;return t.kind===f.NAME&&t.value===e&&(this.advanceLexer(),!0)}unexpected(e){const t=null!=e?e:this._lexer.token;return l(this._lexer.source,t.start,`Unexpected ${W(t)}.`)}any(e,t,n){this.expectToken(e);const r=[];for(;!this.expectOptionalToken(n);)r.push(t.call(this));return r}optionalMany(e,t,n){if(this.expectOptionalToken(e)){const e=[];do{e.push(t.call(this))}while(!this.expectOptionalToken(n));return e}return[]}many(e,t,n){this.expectToken(e);const r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}delimitedMany(e,t){this.expectOptionalToken(e);const n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}advanceLexer(){const{maxTokens:e}=this._options,t=this._lexer.advance();if(void 0!==e&&t.kind!==f.EOF&&(++this._tokenCounter,this._tokenCounter>e))throw l(this._lexer.source,t.start,`Document contains more that ${e} tokens. Parsing aborted.`)}}function W(e){const t=e.value;return Y(e.kind)+(null!=t?` "${t}"`:"")}function Y(e){return function(e){return e===f.BANG||e===f.DOLLAR||e===f.AMP||e===f.PAREN_L||e===f.PAREN_R||e===f.SPREAD||e===f.COLON||e===f.EQUALS||e===f.AT||e===f.BRACKET_L||e===f.BRACKET_R||e===f.BRACE_L||e===f.PIPE||e===f.BRACE_R}(e)?`"${e}"`:e}var G=new Map,K=new Map,V=!0,H=!1;function $(e){return e.replace(/[\s,]+/g," ").trim()}function z(e){var t=$(e);if(!G.has(t)){var n=function(e,t){return new j(e,t).parseDocument()}(e,{experimentalFragmentVariables:H,allowLegacyFragmentVariables:H});if(!n||"Document"!==n.kind)throw new Error("Not a valid GraphQL document.");G.set(t,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(n){var r=e[n];r&&"object"==typeof r&&t.add(r)}))}));var n=e.loc;return n&&(delete n.startToken,delete n.endToken),e}(function(e){var t=new Set,n=[];return e.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var r=e.name.value,i=$((o=e.loc).source.body.substring(o.start,o.end)),s=K.get(r);s&&!s.has(i)?V&&console.warn("Warning: fragment with name "+r+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):s||K.set(r,s=new Set),s.add(i),t.has(i)||(t.add(i),n.push(e))}else n.push(e);var o})),(0,r.pi)((0,r.pi)({},e),{definitions:n})}(n)))}return G.get(t)}function X(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"string"==typeof e&&(e=[e]);var r=e[0];return t.forEach((function(t,n){t&&"Document"===t.kind?r+=t.loc.source.body:r+=t,r+=e[n+1]})),z(r)}var J,Z=X;(J=X||(X={})).gql=Z,J.resetCaches=function(){G.clear(),K.clear()},J.disableFragmentWarnings=function(){V=!1},J.enableExperimentalFragmentVariables=function(){H=!0},J.disableExperimentalFragmentVariables=function(){H=!1},X.default=X},1558:(e,t,n)=>{n.d(t,{t:()=>N});var r=n(7582),i=n(7294),s=n.t(i,2),o=n(4012),a=n(9672),c=n(320),u=!1,h=s.useSyncExternalStore||function(e,t,n){var r=t();!1===globalThis.__DEV__||u||r===t()||(u=!0,!1!==globalThis.__DEV__&&a.kG.error(58));var s=i.useState({inst:{value:r,getSnapshot:t}}),o=s[0].inst,h=s[1];return c.JC?i.useLayoutEffect((function(){Object.assign(o,{value:r,getSnapshot:t}),l(o)&&h({inst:o})}),[e,r,t]):Object.assign(o,{value:r,getSnapshot:t}),i.useEffect((function(){return l(o)&&h({inst:o}),e((function(){l(o)&&h({inst:o})}))}),[e]),r};function l(e){var t=e.value,n=e.getSnapshot;try{return t!==n()}catch(e){return!0}}var d,p=n(20),f=n(5317),m=n(990),g=n(1644);!function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}(d||(d={}));var y=new Map;function v(e){var t;switch(e){case d.Query:t="Query";break;case d.Mutation:t="Mutation";break;case d.Subscription:t="Subscription"}return t}var b=n(8702),k=n(3712),w=n(1436),E=Object.prototype.hasOwnProperty;var T=function(){function e(e,t,n){var r,i,s,o,u,h=this;this.client=e,this.query=t,this.forceUpdate=function(){return h.forceUpdateState()},this.ssrDisabledResult=(0,b.J)({loading:!0,data:void 0,error:void 0,networkStatus:g.Ie.loading}),this.skipStandbyResult=(0,b.J)({loading:!1,data:void 0,error:void 0,networkStatus:g.Ie.ready}),this.toQueryResultCache=new(c.mr?WeakMap:Map),r=t,i=d.Query,s=function(e){var t,n,r=y.get(e);if(r)return r;(0,a.kG)(!!e&&!!e.kind,59,e);for(var i=[],s=[],o=[],c=[],u=0,h=e.definitions;u<h.length;u++){var l=h[u];if("FragmentDefinition"!==l.kind){if("OperationDefinition"===l.kind)switch(l.operation){case"query":s.push(l);break;case"mutation":o.push(l);break;case"subscription":c.push(l)}}else i.push(l)}(0,a.kG)(!i.length||s.length||o.length||c.length,60),(0,a.kG)(s.length+o.length+c.length<=1,61,e,s.length,c.length,o.length),n=s.length?d.Query:d.Mutation,s.length||o.length||(n=d.Subscription);var p=s.length?s:o.length?o:c;(0,a.kG)(1===p.length,62,e,p.length);var f=p[0];t=f.variableDefinitions||[];var m={name:f.name&&"Name"===f.name.kind?f.name.value:"data",type:n,variables:t};return y.set(e,m),m}(r),o=v(i),u=v(s.type),(0,a.kG)(s.type===i,63,o,o,u);var l=n&&n.result,p=l&&l.data;p&&(this.previousData=p)}return e.prototype.forceUpdateState=function(){!1!==globalThis.__DEV__&&a.kG.warn(50)},e.prototype.executeQuery=function(e){var t,n=this;e.query&&Object.assign(this,{query:e.query}),this.watchQueryOptions=this.createWatchQueryOptions(this.queryHookOptions=e);var r=this.observable.reobserveAsConcast(this.getObsQueryOptions());return this.previousData=(null===(t=this.result)||void 0===t?void 0:t.data)||this.previousData,this.result=void 0,this.forceUpdate(),new Promise((function(e){var t;r.subscribe({next:function(e){t=e},error:function(){e(n.toQueryResult(n.observable.getCurrentResult()))},complete:function(){e(n.toQueryResult(t))}})}))},e.prototype.useQuery=function(e){var t=this;this.renderPromises=i.useContext((0,f.K)()).renderPromises,this.useOptions(e);var n=this.useObservableQuery(),r=h(i.useCallback((function(e){if(t.renderPromises)return function(){};t.forceUpdate=e;var r=function(){var e=t.result,r=n.getCurrentResult();e&&e.loading===r.loading&&e.networkStatus===r.networkStatus&&(0,p.D)(e.data,r.data)||t.setResult(r)},i=function(e){if(s.unsubscribe(),s=n.resubscribeAfterError(r,i),!E.call(e,"graphQLErrors"))throw e;var o=t.result;(!o||o&&o.loading||!(0,p.D)(e,o.error))&&t.setResult({data:o&&o.data,error:e,loading:!1,networkStatus:g.Ie.error})},s=n.subscribe(r,i);return function(){setTimeout((function(){return s.unsubscribe()})),t.forceUpdate=function(){return t.forceUpdateState()}}}),[n,this.renderPromises,this.client.disableNetworkFetches]),(function(){return t.getCurrentResult()}),(function(){return t.getCurrentResult()}));return this.unsafeHandlePartialRefetch(r),this.toQueryResult(r)},e.prototype.useOptions=function(t){var n,r=this.createWatchQueryOptions(this.queryHookOptions=t),i=this.watchQueryOptions;(0,p.D)(r,i)||(this.watchQueryOptions=r,i&&this.observable&&(this.observable.reobserve(this.getObsQueryOptions()),this.previousData=(null===(n=this.result)||void 0===n?void 0:n.data)||this.previousData,this.result=void 0)),this.onCompleted=t.onCompleted||e.prototype.onCompleted,this.onError=t.onError||e.prototype.onError,!this.renderPromises&&!this.client.disableNetworkFetches||!1!==this.queryHookOptions.ssr||this.queryHookOptions.skip?this.queryHookOptions.skip||"standby"===this.watchQueryOptions.fetchPolicy?this.result=this.skipStandbyResult:this.result!==this.ssrDisabledResult&&this.result!==this.skipStandbyResult||(this.result=void 0):this.result=this.ssrDisabledResult},e.prototype.getObsQueryOptions=function(){var e=[],t=this.client.defaultOptions.watchQuery;return t&&e.push(t),this.queryHookOptions.defaultOptions&&e.push(this.queryHookOptions.defaultOptions),e.push((0,k.o)(this.observable&&this.observable.options,this.watchQueryOptions)),e.reduce(o.J)},e.prototype.createWatchQueryOptions=function(e){var t;void 0===e&&(e={});var n=e.skip,i=(e.ssr,e.onCompleted,e.onError,e.defaultOptions,(0,r._T)(e,["skip","ssr","onCompleted","onError","defaultOptions"])),s=Object.assign(i,{query:this.query});if(!this.renderPromises||"network-only"!==s.fetchPolicy&&"cache-and-network"!==s.fetchPolicy||(s.fetchPolicy="cache-first"),s.variables||(s.variables={}),n){var o=s.fetchPolicy,a=void 0===o?this.getDefaultFetchPolicy():o,c=s.initialFetchPolicy,u=void 0===c?a:c;Object.assign(s,{initialFetchPolicy:u,fetchPolicy:"standby"})}else s.fetchPolicy||(s.fetchPolicy=(null===(t=this.observable)||void 0===t?void 0:t.options.initialFetchPolicy)||this.getDefaultFetchPolicy());return s},e.prototype.getDefaultFetchPolicy=function(){var e,t;return(null===(e=this.queryHookOptions.defaultOptions)||void 0===e?void 0:e.fetchPolicy)||(null===(t=this.client.defaultOptions.watchQuery)||void 0===t?void 0:t.fetchPolicy)||"cache-first"},e.prototype.onCompleted=function(e){},e.prototype.onError=function(e){},e.prototype.useObservableQuery=function(){var e=this.observable=this.renderPromises&&this.renderPromises.getSSRObservable(this.watchQueryOptions)||this.observable||this.client.watchQuery(this.getObsQueryOptions());this.obsQueryFields=i.useMemo((function(){return{refetch:e.refetch.bind(e),reobserve:e.reobserve.bind(e),fetchMore:e.fetchMore.bind(e),updateQuery:e.updateQuery.bind(e),startPolling:e.startPolling.bind(e),stopPolling:e.stopPolling.bind(e),subscribeToMore:e.subscribeToMore.bind(e)}}),[e]);var t=!(!1===this.queryHookOptions.ssr||this.queryHookOptions.skip);return this.renderPromises&&t&&(this.renderPromises.registerSSRObservable(e),e.getCurrentResult().loading&&this.renderPromises.addObservableQueryPromise(e)),e},e.prototype.setResult=function(e){var t=this.result;t&&t.data&&(this.previousData=t.data),this.result=e,this.forceUpdate(),this.handleErrorOrCompleted(e,t)},e.prototype.handleErrorOrCompleted=function(e,t){var n=this;if(!e.loading){var r=this.toApolloError(e);Promise.resolve().then((function(){r?n.onError(r):e.data&&(null==t?void 0:t.networkStatus)!==e.networkStatus&&e.networkStatus===g.Ie.ready&&n.onCompleted(e.data)})).catch((function(e){!1!==globalThis.__DEV__&&a.kG.warn(e)}))}},e.prototype.toApolloError=function(e){return(0,w.O)(e.errors)?new m.cA({graphQLErrors:e.errors}):e.error},e.prototype.getCurrentResult=function(){return this.result||this.handleErrorOrCompleted(this.result=this.observable.getCurrentResult()),this.result},e.prototype.toQueryResult=function(e){var t=this.toQueryResultCache.get(e);if(t)return t;var n=e.data,i=(e.partial,(0,r._T)(e,["data","partial"]));return this.toQueryResultCache.set(e,t=(0,r.pi)((0,r.pi)((0,r.pi)({data:n},i),this.obsQueryFields),{client:this.client,observable:this.observable,variables:this.observable.variables,called:!this.queryHookOptions.skip,previousData:this.previousData})),!t.error&&(0,w.O)(e.errors)&&(t.error=new m.cA({graphQLErrors:e.errors})),t},e.prototype.unsafeHandlePartialRefetch=function(e){!e.partial||!this.queryHookOptions.partialRefetch||e.loading||e.data&&0!==Object.keys(e.data).length||"cache-only"===this.observable.options.fetchPolicy||(Object.assign(e,{loading:!0,networkStatus:g.Ie.refetch}),this.observable.refetch())},e}(),x=["refetch","reobserve","fetchMore","updateQuery","startPolling","subscribeToMore"];function N(e,t){var n,s=i.useRef(),c=i.useRef(),u=i.useRef(),h=(0,o.J)(t,s.current||{}),l=null!==(n=null==h?void 0:h.query)&&void 0!==n?n:e;c.current=h,u.current=l;var d,p,m,g=function(e,t){var n=i.useRef();n.current&&e===n.current.client&&t===n.current.query||(n.current=new T(e,t,n.current));var r=n.current;return r.forceUpdateState=i.useReducer((function(e){return e+1}),0)[1],r}((d=t&&t.client,p=i.useContext((0,f.K)()),m=d||p.client,(0,a.kG)(!!m,49),m),l),y=g.useQuery((0,r.pi)((0,r.pi)({},h),{skip:!s.current})),v=y.observable.options.initialFetchPolicy||g.getDefaultFetchPolicy(),b=Object.assign(y,{called:!!s.current}),k=i.useMemo((function(){for(var e={},t=function(t){var n=b[t];e[t]=function(){return s.current||(s.current=Object.create(null),g.forceUpdateState()),n.apply(this,arguments)}},n=0,r=x;n<r.length;n++)t(r[n]);return e}),[]);Object.assign(b,k);var w=i.useCallback((function(e){s.current=e?(0,r.pi)((0,r.pi)({},e),{fetchPolicy:e.fetchPolicy||v}):{fetchPolicy:v};var t=(0,o.J)(c.current,(0,r.pi)({query:u.current},s.current)),n=g.executeQuery((0,r.pi)((0,r.pi)({},t),{skip:!1})).then((function(e){return Object.assign(e,k)}));return n.catch((function(){})),n}),[]);return[w,b]}},6538:(e,t,n)=>{n.d(t,{WU:()=>Y});const r={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function i(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const s={date:i({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:i({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:i({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},o={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function a(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,i=n?.width?String(n.width):t;r=e.formattingValues[i]||e.formattingValues[t]}else{const t=e.defaultWidth,i=n?.width?String(n.width):e.defaultWidth;r=e.values[i]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function c(e){return(t,n={})=>{const r=n.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],s=t.match(i);if(!s)return null;const o=s[0],a=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(a)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(o))return t}(a):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(o))return t}(a);let u;return u=e.valueCallback?e.valueCallback(c):c,u=n.valueCallback?n.valueCallback(u):u,{value:u,rest:t.slice(o.length)}}}var u;const h={code:"en-US",formatDistance:(e,t,n)=>{let i;const s=r[e];return i="string"==typeof s?s:1===t?s.one:s.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+i:i+" ago":i},formatLong:s,formatRelative:(e,t,n,r)=>o[e],localize:{ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:a({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:a({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:a({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:a({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:a({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(u={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(u.matchPattern);if(!n)return null;const r=n[0],i=e.match(u.parsePattern);if(!i)return null;let s=u.valueCallback?u.valueCallback(i[0]):i[0];return s=t.valueCallback?t.valueCallback(s):s,{value:s,rest:e.slice(r.length)}}),era:c({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:c({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:c({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:c({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:c({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let l={};function d(){return l}Math.pow(10,8);const p=6048e5,f=864e5;function m(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function g(e){const t=m(e);return t.setHours(0,0,0,0),t}function y(e){const t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function v(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function b(e){const t=m(e);return function(e,t){const n=g(e),r=g(t),i=+n-y(n),s=+r-y(r);return Math.trunc((i-s)/f)}(t,function(e){const t=m(e),n=v(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function k(e,t){const n=d(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,i=m(e),s=i.getDay(),o=(s<r?7:0)+s-r;return i.setDate(i.getDate()-o),i.setHours(0,0,0,0),i}function w(e){return k(e,{weekStartsOn:1})}function E(e){const t=m(e),n=t.getFullYear(),r=v(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const i=w(r),s=v(e,0);s.setFullYear(n,0,4),s.setHours(0,0,0,0);const o=w(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function T(e){const t=m(e),n=+w(t)-+function(e){const t=E(e),n=v(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),w(n)}(t);return Math.trunc(n/p)+1}function x(e,t){const n=m(e),r=n.getFullYear(),i=d(),s=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,o=v(e,0);o.setFullYear(r+1,0,s),o.setHours(0,0,0,0);const a=k(o,t),c=v(e,0);c.setFullYear(r,0,s),c.setHours(0,0,0,0);const u=k(c,t);return n.getTime()>=a.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}function N(e,t){const n=m(e),r=+k(n,t)-+function(e,t){const n=d(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,i=x(e,t),s=v(e,0);return s.setFullYear(i,0,r),s.setHours(0,0,0,0),k(s,t)}(n,t);return Math.trunc(r/p)+1}function O(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const D={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return O("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):O(n+1,2)},d:(e,t)=>O(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>O(e.getHours()%12||12,t.length),H:(e,t)=>O(e.getHours(),t.length),m:(e,t)=>O(e.getMinutes(),t.length),s:(e,t)=>O(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return O(Math.trunc(r*Math.pow(10,n-3)),t.length)}},A={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return D.y(e,t)},Y:function(e,t,n,r){const i=x(e,r),s=i>0?i:1-i;return"YY"===t?O(s%100,2):"Yo"===t?n.ordinalNumber(s,{unit:"year"}):O(s,t.length)},R:function(e,t){return O(E(e),t.length)},u:function(e,t){return O(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return O(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return O(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return D.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return O(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const i=N(e,r);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):O(i,t.length)},I:function(e,t,n){const r=T(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):O(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):D.d(e,t)},D:function(e,t,n){const r=b(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):O(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const i=e.getDay(),s=(i-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(s);case"ee":return O(s,2);case"eo":return n.ordinalNumber(s,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const i=e.getDay(),s=(i-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(s);case"cc":return O(s,t.length);case"co":return n.ordinalNumber(s,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),i=0===r?7:r;switch(t){case"i":return String(i);case"ii":return O(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let i;switch(i=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let i;switch(i=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return D.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):D.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):O(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):O(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):D.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):D.s(e,t)},S:function(e,t){return D.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return S(r);case"XXXX":case"XX":return _(r);default:return _(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return S(r);case"xxxx":case"xx":return _(r);default:return _(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+C(r,":");default:return"GMT"+_(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+C(r,":");default:return"GMT"+_(r,":")}},t:function(e,t,n){return O(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return O(e.getTime(),t.length)}};function C(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),i=Math.trunc(r/60),s=r%60;return 0===s?n+String(i):n+String(i)+t+O(s,2)}function S(e,t){return e%60==0?(e>0?"-":"+")+O(Math.abs(e)/60,2):_(e,t)}function _(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+O(Math.trunc(r/60),2)+t+O(r%60,2)}const I=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},P=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},M={p:P,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],i=n[2];if(!i)return I(e,t);let s;switch(r){case"P":s=t.dateTime({width:"short"});break;case"PP":s=t.dateTime({width:"medium"});break;case"PPP":s=t.dateTime({width:"long"});break;default:s=t.dateTime({width:"full"})}return s.replace("{{date}}",I(r,t)).replace("{{time}}",P(i,t))}},R=/^D+$/,L=/^Y+$/,F=["D","DD","YY","YYYY"];function U(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=m(e);return!isNaN(Number(n))}const B=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Q=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,q=/^'([^]*?)'?$/,j=/''/g,W=/[a-zA-Z]/;function Y(e,t,n){const r=d(),i=n?.locale??r.locale??h,s=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,a=m(e);if(!U(a))throw new RangeError("Invalid time value");let c=t.match(Q).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,M[t])(e,i.formatLong):e})).join("").match(B).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:G(e)};if(A[t])return{isToken:!0,value:e};if(t.match(W))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));i.localize.preprocessor&&(c=i.localize.preprocessor(a,c));const u={firstWeekContainsDate:s,weekStartsOn:o,locale:i};return c.map((r=>{if(!r.isToken)return r.value;const s=r.value;return(!n?.useAdditionalWeekYearTokens&&function(e){return L.test(e)}(s)||!n?.useAdditionalDayOfYearTokens&&function(e){return R.test(e)}(s))&&function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),F.includes(e))throw new RangeError(r)}(s,t,String(e)),(0,A[s[0]])(a,s,i.localize,u)})).join("")}function G(e){const t=e.match(q);return t?t[1].replace(j,"'"):e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,